---
title: Moisturizer Madness
subtitle: Part 1
author: Louis Gioia, PhD
date: 2025-07-14
date-format: long
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
#| output: false

## load libraries
library(googlesheets4)
library(rvest)
library(knitr)
library(ggplot2)
library(stringr)
```

## Introduction
### Project goals
The goal of this project is to obtain a global view of what skincare companies are putting in their facial moisturizers. Most large manufacturers of cosmetics have a moisturizer on the market. You can go through the ingredient lists one by one, but with dozens of ingredients in each list, keeping track of what is in each moisturizer is incredibly difficult. What if we could look at all of the ingredient lists at once? We might be better able to tease out similarities and differences. We might be able to see which ingredients are important and which ones are just fluff. We might also be able to achieve the holy grail of skincare -- finding dupes for expensive products so that we don't waste our money.

_Disclaimer:_ I am a scientist who is not happy with the state of the skincare industry. I am pretty sure that skincare companies are just making stuff up and always have been. They are not doing much research (outside of marketing and maybe safety testing). They are more interested in combining different goops and gunks than really inventing anything new. Their main focus is getting people to buy their products. So they put all of their effort and money into marketing and copying the things that other people have successfully marketed.

### Product label authorities
Who decided how to label skincare products? In the United States, cosmetics labeling is regulated by the FDA.

### Ingredient list rules
What are the rules for ingredient lists?

### Moisturizer basics
What is a moisturizer supposed to do?

## Getting the data

First, we have to get some data. I got the best-seller results from [Target](https://www.target.com/) and [Sephora](https://www.sephora.com/), and created a [google sheet](https://docs.google.com/spreadsheets/d/e/2PACX-1vS4wAroj1XvB4aiuOg97IdS6xNd2x0wsylwXOYZZlCAysx3n5SA9Fi3IcLrbWGe_e7cuhzW2_fOl8qj/pubhtml) with each product's brand name, product name, price, size, and product link on [INCIDecoder](https://www.incidecoder.com), which is where we will be scraping the ingredient lists. Sadly, the Target and Sephora websites are difficult to scrape. I had to gather all of the data by hand :( I might try to implement that in the future with [RSelenium](https://docs.ropensci.org/RSelenium/). 

The google sheet is imported using the [googlesheets4 R package](https://googlesheets4.tidyverse.org/).
```{r}
#| echo: false
#| message: false

# productSheet <- read_sheet("1LVIoYIZDoDtc26z5JMHpv_7a34aqSZwdFsazG8_JlfY")
# write.csv(productSheet, paste0(here(), "/data/productSheet.csv"), row.names = F)

productSheet <- read.csv("./data/productSheet.csv")
```

Here are the top few entries:
```{r}
#| echo: false

kable(head(productSheet, n = 5L))
```

Next, we loop through all of the INCIDecoder product URLs and grab the ingredient lists using the [rvest package](https://rvest.tidyverse.org/).
```{r}
#| echo: false

# source("./functions/createIngredientLists.R")
# ingredientLists <- createIngredientLists(productSheet)

ingredientLists <- readRDS("./data/ingredientLists")
```

Here are the the first 5 ingredients from the first 3 products:
```{r}
#| echo: false

kable(sapply(ingredientLists[1:3], head, 5))
```

As you might notice. We have some problems with how ingredients are labeled. The main ingredient in each of those products is water. Of course, these companies can't just call it water. They have to be special and call it "Aqua," or "Eau," or "Purified." And don't get me started on "La Roche-Posay Prebiotic Thermal Water."

## Water is water, right?

How many names for water can there be?
```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 7

ingredientsAll <- as.vector(do.call(c, ingredientLists, quote=T))
waterNames <- ingredientsAll[grep("Water|Aqua|Eau", ingredientsAll)]
waterNames <- gsub("[^ -~]+", "", waterNames)
waterNames <- waterNames[-grep("Citrullus|Rosa|Vitis", waterNames)]
waterCounts <- sort(table(waterNames), decreasing = TRUE)
waterDf <- data.frame(waterCounts)
## move La Roche-Posay water to the end
waterDf <- waterDf[c(1:10, 12:13, 11),]
waterDf$waterNames <- factor(waterDf$waterNames, levels = waterDf$waterNames)

ggplot(waterDf, aes(waterNames, Freq)) +
  geom_bar(stat="identity") +
  geom_text(aes(label = Freq), nudge_y = 0.5) +
  labs(title = "Different Names for Water",
       x = "",
       y = "Counts") +
  scale_x_discrete(guide = guide_axis(angle = 30)) +
  theme_minimal() +
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        axis.title.y = element_text(size = 14),
        axis.text = element_text(size = 12),
        panel.grid.minor = element_blank(),
        panel.grid.major.x = element_blank())
```

We will need to do a lot of data cleaning in order to analyze any of these ingredient lists. I will spare you most of the details. Briefly, I converted all of the ingredient names to lowercase, removed unnecessary characters, and merged many ingredients by hand (really I just used a bunch of regular expressions.)

Let's count how many unique ingredients we have after each cleaning step.

## Cleaning up

```{r}
#| echo: false

## load countUniqueIngredients function and ingredient regex data
source("./functions/countUniqueIngredients.R")
source("./data/ingredientRegex.R")

countUniqueIngredients(ingredientLists = ingredientLists, title = "# of original ingredients")

ingredientListsUpperCase <- lapply(ingredientLists, toupper)
countUniqueIngredients(ingredientLists = ingredientListsUpperCase, title = "# of uppercase ingredients")

ingredientListsNoWeirdness <- lapply(ingredientListsUpperCase, str_replace_all, strangeCharactersRegex)
countUniqueIngredients(ingredientLists = ingredientListsNoWeirdness, title = "# of ingredients w/o strange characters")

names(ingredientRegex) <- toupper(names(ingredientRegex))
ingredientRegex <- toupper(ingredientRegex)
ingredientListsClean <- lapply(ingredientListsNoWeirdness, str_replace_all, ingredientRegex)
countUniqueIngredients(ingredientLists = ingredientListsClean, title = "# of merged and cleaned ingredients")

## save cleaned ingredient lists
saveRDS(ingredientListsClean, "./data/ingredientListsClean")
```

Now that we have cleaned our ingredient names and gone from 857 to 713 unique ingredients, we can do some actual analysis of the data.
---
title: "Moisturizer Ingredient Analysis"
subtitle: "Ingredients & Price"
author: "Louis Gioia, PhD"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
#| output: false

## load libraries
library(knitr)
library(dplyr)
library(ggplot2)


## load data
productSheet <- read.csv("./data/productSheet.csv")
ingredientListsClean <- readRDS("./data/ingredientListsClean")
```

### Number of ingredients

How many ingredients do each of these moisturizers contain?

```{r echo=FALSE}
ingredientsUnique <- as.vector(do.call(c, ingredientListsClean, quote=T)) %>% unique %>% sort

ingRankDf <- data.frame(row.names = ingredientsUnique)

productSheet$full_name <- paste(productSheet$BRAND_NAME, productSheet$PRODUCT_NAME)

for(i in productSheet$full_name){
  ingRankDf[,i] <- as.numeric(match(row.names(ingRankDf), ingredientListsClean[[i]]))
}

ingDf <- ingRankDf
ingDf[is.na(ingDf)] <- as.numeric(0)
ingDf[ingDf>0] <- as.numeric(1)

prodDf <- as.data.frame(t(ingDf))

ingredientCountsPerProduct <- data.frame(product = paste(productSheet$BRAND_NAME, productSheet$PRODUCT_NAME, sep = " "),
                                         count = rowSums(prodDf), 
                                         row.names = NULL)

ingredientCountsPerProductSummary <- data.frame(minimum = min(ingredientCountsPerProduct$count),
                                                median = median(ingredientCountsPerProduct$count),
                                                maximum = max(ingredientCountsPerProduct$count))

kable(ingredientCountsPerProductSummary)
```

Here are the top and bottom 10 products, sorted by number of ingredients.

```{r echo=FALSE, fig.width=10, fig.height=7}
ingredientCountsPerProductSorted <- arrange(ingredientCountsPerProduct, count)

numberOfProducts <- nrow(ingredientCountsPerProductSorted)
ingredientCountsTopAndBottom <- ingredientCountsPerProductSorted[c(1:10,                
                                                                   (numberOfProducts-10):numberOfProducts),]
ingredientCountsTopAndBottom$product <- factor(ingredientCountsTopAndBottom$product,
                                                      levels = ingredientCountsTopAndBottom$product)

ggplot(ingredientCountsTopAndBottom, aes(product, count)) +
  geom_bar(stat="identity") +
  labs(title = "Number of Ingredients in Moisturizers",
       x = "",
       y = "Counts") +
  scale_y_continuous(sec.axis = dup_axis()) +
  coord_flip() +
  theme_minimal() +
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        axis.title.x = element_text(size = 14),
        axis.text = element_text(size = 12),
        panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank())

```

What is the deal with the Ole Henriksen moisturizer? Do they really need to use 72 ingredients? Does that make it a better moisturizer? 

### Price

We also have the price per ounce of each product. Here is a summary:

```{r echo=FALSE, fig.width=10, fig.height=7}
ingCountsPrice <- data.frame(ingredientCountsPerProduct,
                             priceperoz = productSheet$PRICE/productSheet$SIZE)

prodPriceSummary <- data.frame(minimum = min(ingCountsPrice$priceperoz),
                                     mean = mean(ingCountsPrice$priceperoz),
                                     median = median(ingCountsPrice$priceperoz),
                                     maximum = max(ingCountsPrice$priceperoz))

prodPriceSummary <- format(round(prodPriceSummary, 2), nsmall = 2)
prodPriceSummary <- paste0("$", prodPriceSummary)
prodPriceSummaryFormatted <- data.frame(minimum = prodPriceSummary[1],
                                     mean = prodPriceSummary[2],
                                     median = prodPriceSummary[3],
                                     maximum = prodPriceSummary[4])

kable(prodPriceSummaryFormatted)

ingredientPriceSorted <- arrange(ingCountsPrice, priceperoz)

ingredientPriceTopAndBottom <- ingredientPriceSorted[c(1:10, (numberOfProducts-10):numberOfProducts),]
ingredientPriceTopAndBottom$product <- factor(ingredientPriceTopAndBottom$product,
                                                      levels = ingredientPriceTopAndBottom$product)

priceLabels <- function(x) {
  paste0("$", x)
}

ggplot(ingredientPriceTopAndBottom, aes(product, priceperoz)) +
  geom_bar(stat="identity") +
  labs(title = "Price/Ounce",
       x = "",
       y = "") +
  scale_y_continuous(breaks = seq(0, 60, 10), labels = priceLabels, sec.axis = dup_axis()) +
  coord_flip() +
  theme_minimal() +
  theme(plot.title = element_text(size = 16, hjust = 0.5),
        axis.title.x = element_text(size = 14),
        axis.text = element_text(size = 12),
        panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank())
```


### Correlation of price and number of ingredients
Now, we can compare prices to the number of ingredients in each moisturizer. Let's do a quick correlation test first.

```{r echo=FALSE,include=TRUE,results='asis'}
ingredientCount <- ingCountsPrice$count
pricePerOz <- ingCountsPrice$priceperoz

cat('<pre>')
print(cor.test(ingredientCount, pricePerOz))
cat('</pre>')
```

There is a statistically significant correlation between price and ingredient count. I guess that makes sense. Let's visualize the correlation using the [plotly R package](https://plotly.com/r/) to give some interactivity.

```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width=10, fig.height=7}
library(plotly)

ingCountsPrice$store <- productSheet$STORE

p <- ggplot(ingCountsPrice, aes(count, priceperoz)) +
  geom_point(aes(text = product, colour = store)) +
  geom_smooth() +
  scale_x_continuous(breaks = seq(0, 70, 10)) +
  scale_y_continuous(breaks = seq(0, 60, 10), labels = priceLabels) +
  scale_color_manual(values = c("target" = "#cc0100", "sephora" = "#143642")) +
  labs(title = "hover to see product names",
       x = "Number of Ingredients",
       y = "Price/Ounce") +
  theme_minimal() +
  theme(plot.title = element_text(size = 12, hjust = 0.5),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 12))

ggplotly(p, tooltip = "text") %>%
  style(hoverinfo = "skip", traces = 3) %>%
  style(hoverinfo = "skip", traces = 4)
```

Interestingly, it looks like the Ole Henriksen moisturizer isn't so bad if you're just looking to maximize the number of ingredients in your lotion. Bobbi Brown and Charlotte Tilbury, on the other hand, are out of control. How are people spending more than $50 per ounce of moisturizer? More dollars than sense, I guess. 
